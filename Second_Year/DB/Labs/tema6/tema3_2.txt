Database Programming with PL/SQL
3-2: Retrieving Data in PL/SQL

Try It / Solve It

1. State whether each of the following SQL statements can be included directly in a PL/SQL block.

ALTER USER SET password = 'oracle';  invalid
CREATE TABLE test (a NUMBER);		 invalid
DROP TABLE test;					 invalid
SELECT emp_id INTO v_id FROM employees;	valid
GRANT SELECT ON employees TO PUBLIC;	invalid
INSERT INTO grocery_items (product_id, brand, valid
 description) VALUES (199, 'Coke', 'Soda');
REVOKE UPDATE ON employees FROM PUBLIC;		invalid
ALTER TABLE employees						invalid
 RENAME COLUMN employee_id TO emp_id;
DELETE FROM grocery_items					valid
 WHERE description = 'Soap';
 
2. Create a PL/SQL block that selects the maximum department_id in the departments table and
stores it in the v_max_deptno variable. Display the maximum department_id. Declare
v_max_deptno to be the same datatype as the department_id column. Include a SELECT
statement to retrieve the highest department_id from the departments table. Display the variable
v_max_deptno.

declare
    v_max_deptno departments.department_id%TYPE;
begin
    select max(department_id)
    into v_max_deptno
    from departments;

    DBMS_OUTPUT.PUT_LINE('The maximum department_id is: ' || v_max_deptno);
end;

3. The following code is supposed to display the lowest and highest elevations for a country name
entered by the user. However, the code does not work. Fix the code by following the guidelines for
retrieving data that you learned in this lesson.

DECLARE
 v_country_name countries.country_name%TYPE := Federative Republic of Brazil;
 v_lowest_elevation countries.lowest_elevation%TYPE;
 v_highest_elevation countries.highest_elevation%TYPE;
BEGIN
 SELECT lowest_elevation, highest_elevation
 FROM countries;
 DBMS_OUTPUT.PUT_LINE('The lowest elevation in '
|| v_country_name || ' is ' || v_lowest_elevation
 || ' and the highest elevation is ' || v_highest_elevation || '.');
END;

DECLARE
    v_country_name countries.country_name%TYPE := 'Federative Republic of Brazil';
    v_lowest_elevation countries.lowest_elevation%TYPE;
    v_highest_elevation countries.highest_elevation%TYPE;
BEGIN
    SELECT lowest_elevation, highest_elevation
    INTO v_lowest_elevation, v_highest_elevation
    FROM countries
    WHERE country_name = v_country_name;
    
    DBMS_OUTPUT.PUT_LINE('The lowest elevation in ' || v_country_name || ' is ' || v_lowest_elevation || ' and the highest elevation is ' || v_highest_elevation || '.');
END;



4. Run the following anonymous block. It should execute successfully.

DECLARE
 v_emp_lname employees.last_name%TYPE;
 v_emp_salary employees.salary%TYPE;
BEGIN
 SELECT last_name, salary INTO v_emp_lname, v_emp_salary
 FROM employees
 WHERE job_id = 'AD_PRES';
 DBMS_OUTPUT.PUT_LINE(v_emp_lname || ' ' || v_emp_salary);
END;
A. Now modify the block to use ‘IT_PROG’ instead of ‘AD_PRES’ and re-run it. Why does it fail
this time?
The code fails because there are likely multiple employees with the job_id 'IT_PROG'. 
The SELECT INTO statement expects only one row to be returned

B. Now modify the block to use ‘IT_PRAG’ instead of ‘IT_PROG’ and re-run it. Why does it still
fail?
This code will fail because 'IT_PRAG' does not exist in the job_id column of the employees table.
no data found

5. Use (but don't execute) the following code to answer this question:

DECLARE
 last_name VARCHAR2(25) := 'Fay';
BEGIN
 UPDATE emp_dup
 SET first_name = 'Jennifer'
 WHERE last_name = last_name;
END;

What do you think would happen if you ran the above code? Write your answer here and then
follow the steps below to test your theory.



A. Create a table called emp_dup that is a duplicate of employees.

CREATE TABLE emp_dup AS SELECT * FROM employees;

B. Select the first_name and last_name values for all rows in emp_dup.

SELECT first_name, last_name FROM emp_dup;


C. Run the anonymous PLSQL block shown at the beginning of this question.

DECLARE
    last_name VARCHAR2(25) := 'Fay';
BEGIN
    UPDATE emp_dup
    SET first_name = 'Jennifer'
    WHERE last_name = last_name;
END;


D. Select the first_name and last_name columns from emp_dup again to confirm your theory.

SELECT first_name, last_name FROM emp_dup;

all rows where last_name is not NULL have been updated to have first_name as 'Jennifer'.

E. Now we are going to correct the code so that it changes only the first name for the employee
whose last name is “Fay”. Drop emp_dup and re-create it.

DROP TABLE emp_dup;
CREATE TABLE emp_dup AS SELECT * FROM employees;

F. Modify the code shown at the beginning of this question so that for the employee whose
last_name = ”Fay”, the first_name is updated to Jennifer. Run your modified block.

DECLARE
    v_last_name VARCHAR2(25) := 'Fay';
BEGIN
    UPDATE emp_dup
    SET first_name = 'Jennifer'
    WHERE last_name = v_last_name;
END;

G. Confirm that your update statement worked correctly.

SELECT first_name, last_name FROM emp_dup WHERE last_name = 'Fay';

6. Is it possible to name a column in a table the same name as the table? Create a table to test this
question. Don't forget to populate the table with data.

Yes, it is possible to name a column the same as the table, but it can cause confusion and should be avoided in practice.

CREATE TABLE test_table (
    test_table VARCHAR2(50),
    other_column VARCHAR2(50)
);

INSERT INTO test_table (test_table, other_column)
VALUES ('Sample Value', 'Other Value');

SELECT * FROM test_table;


7. Is it possible to have a column, table, and variable, all with the same name? Using the table you
created in the question above, write a PL/SQL block to test your theory.

Yes, it is technically possible to have a column, table, and PL/SQL variable all with the same name. However, it can lead to ambiguity in the code

DECLARE
    test_table VARCHAR2(50) := 'Variable Value';
BEGIN
    DECLARE
        column_value VARCHAR2(50);
    BEGIN
        SELECT test_table INTO column_value
        FROM test_table
        WHERE other_column = 'Other Value';

        DBMS_OUTPUT.PUT_LINE('Column value: ' || column_value);
        DBMS_OUTPUT.PUT_LINE('Variable value: ' || test_table);
    END;
END;

